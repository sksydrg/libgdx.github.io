<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="https://libgdx.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://libgdx.com/" rel="alternate" type="text/html" /><updated>2022-09-01T08:49:42+00:00</updated><id>https://libgdx.com/feed.xml</id><title type="html">libGDX</title><subtitle>libGDX is a cross-platform Java game development framework based on OpenGL (ES) that works on Windows, Linux, macOS, Android, your browser and iOS.</subtitle><entry><title type="html">libGDX Jam September 2022</title><link href="https://libgdx.com/news/2022/09/jam-september-2022" rel="alternate" type="text/html" title="libGDX Jam September 2022" /><published>2022-09-01T00:00:00+00:00</published><updated>2022-09-01T00:00:00+00:00</updated><id>https://libgdx.com/news/2022/09/jam-september-2022</id><content type="html" xml:base="https://libgdx.com/news/2022/09/jam-september-2022"><![CDATA[<p>With our 22nd collaboration, the <a href="/community/jams/">libGDX Jam</a> continues the time-honoured tradition of making awesome games using the best framework out there. We encourage camaraderie, teamwork, and good sportsmanship with a side of well-intentioned buffoonery. The general jam rules can as always be found <a href="/community/jams/#rules">here</a>. <strong>To participate take a look at the official <a href="https://itch.io/jam/libgdx-jam-22">itch.io page of the jam</a>.</strong> The jam trailer can be found on <a href="https://www.youtube.com/watch?v=HNchS56ByWU">YouTube</a>.</p>

<p>Be sure to get involved with the community by joining the libGDX Discord server!</p>

<h2 id="schedule">Schedule</h2>
<p><em>The theme is yet to be determined.</em>
<!--The theme is **Floating Cities**. Good luck everybody!--></p>

<ul>
  <li><strong>Theme Submission:</strong> 11th - 13th of September. Everyone will be allowed to submit a theme for the jam.</li>
  <li><strong>Voting:</strong> 15th - 17th of September.  Everyone will vote on their favourite theme. May the best win!</li>
  <li><strong>Jam:</strong> 18th - 24th of September. Participants will create their games and rejoice!</li>
</ul>

<!--## Submissions
The libGDX Jam June 2022 is now over! We hope everyone had a lot of fun and are proud to present the [15 submissions](https://itch.io/jam/libgdx-jam-21/entries). Don't forget to check out our [live-stream playthrough](https://www.youtube.com/watch?v=CEamuhDWML8) of all the games.-->]]></content><author><name></name></author><category term="news" /><summary type="html"><![CDATA[With our 22nd collaboration, the libGDX Jam continues the time-honoured tradition of making awesome games using the best framework out there. We encourage camaraderie, teamwork, and good sportsmanship with a side of well-intentioned buffoonery. The general jam rules can as always be found here. To participate take a look at the official itch.io page of the jam. The jam trailer can be found on YouTube.]]></summary></entry><entry><title type="html">libGDX Jam June 2022</title><link href="https://libgdx.com/news/2022/06/jam-june-2022" rel="alternate" type="text/html" title="libGDX Jam June 2022" /><published>2022-06-01T00:00:00+00:00</published><updated>2022-06-01T00:00:00+00:00</updated><id>https://libgdx.com/news/2022/06/jam-june-2022</id><content type="html" xml:base="https://libgdx.com/news/2022/06/jam-june-2022"><![CDATA[<p>With our 21st collaboration, the <a href="/community/jams/">libGDX Jam</a> continues the time honoured tradition of making awesome games using the best framework out there. We encourage camaraderie, teamwork, and good sportsmanship with a side of well-intentioned buffoonery. The general jam rules can as always be found <a href="/community/jams/#rules">here</a>. <strong>To participate take a look at the official <a href="https://itch.io/jam/libgdx-jam-21">itch.io page of the jam</a>.</strong> The official jam trailer can be found on <a href="https://www.youtube.com/watch?v=fvhC0URjW00">YouTube</a>.</p>

<p>Be sure to get involved with the community by joining the libGDX Discord server!</p>

<h2 id="schedule">Schedule</h2>
<!--_The theme is yet to be determined._-->
<p>The theme is <strong>Floating Cities</strong>. Good luck everybody!</p>

<ul>
  <li><strong>Theme Submission:</strong> 13th - 15th of June. Everyone will be allowed to submit a theme for the jam.</li>
  <li><strong>Voting:</strong> 16th - 18th of June.  Everyone will vote on their favourite theme. May the best win!</li>
  <li><strong>Jam:</strong> 19th - 25th of June. Participants will create their games and rejoice!</li>
</ul>

<h2 id="submissions">Submissions</h2>
<p>The libGDX Jam June 2022 is now over! We hope everyone had a lot of fun and are proud to present the <a href="https://itch.io/jam/libgdx-jam-21/entries">15 submissions</a>. Don’t forget to check out our <a href="https://www.youtube.com/watch?v=CEamuhDWML8">live-stream playthrough</a> of all the games.</p>]]></content><author><name></name></author><category term="news" /><summary type="html"><![CDATA[With our 21st collaboration, the libGDX Jam continues the time honoured tradition of making awesome games using the best framework out there. We encourage camaraderie, teamwork, and good sportsmanship with a side of well-intentioned buffoonery. The general jam rules can as always be found here. To participate take a look at the official itch.io page of the jam. The official jam trailer can be found on YouTube.]]></summary></entry><entry><title type="html">libGDX 1.11.0</title><link href="https://libgdx.com/news/2022/05/gdx-1-11" rel="alternate" type="text/html" title="libGDX 1.11.0" /><published>2022-05-11T00:00:00+00:00</published><updated>2022-05-11T00:00:00+00:00</updated><id>https://libgdx.com/news/2022/05/gdx-1-11</id><content type="html" xml:base="https://libgdx.com/news/2022/05/gdx-1-11"><![CDATA[<p class="notice--primary no-top-margin">If you are looking for past changelogs, check out <a href="/news/changelog/">this</a> page.</p>

<p>Since our last release a little over a year ago, a great deal of work has been done! libGDX 1.11.0 brings improvements and new features in various areas – take a look below to find out more! If you are upgrading from an older version, be sure to also check out the <a href="/news/2021/04/the-ultimate-migration-guide">Ultimate Migration Guide (1.9.10 to 1.10.0)</a>.</p>

<h3 id="lwjgl-3">LWJGL 3!</h3>
<p>As announced in <a href="/news/2021/07/devlog-7-lwjgl3">Status Report #7</a>, the LWJGL 3 backend is now the default desktop backend. This ensures continued support for newer hardware and JVMs and includes a few other nifty features. Check out the Status Report to see how to <a href="/news/2021/07/devlog-7-lwjgl3#how-can-i-migrate">update your projects</a>, if you haven’t already! We also updated from LWJGL 3.2.3 to <a href="https://github.com/LWJGL/lwjgl3/releases/tag/3.3.1">3.3.1</a>, which adds the long awaited <strong>M1 Mac support</strong>!</p>

<p>Another cool new feature is the <strong><code class="language-plaintext highlighter-rouge">gdx-lwjgl3-glfw-awt-macos</code> extension</strong>. If you add it as a dependency to your desktop project (<code class="language-plaintext highlighter-rouge">api "com.badlogicgames.gdx:gdx-lwjgl3-glfw-awt-macos:$gdxVersion"</code>), LWJGL 3/libGDX must no longer run on the main thread in macOS, which allows AWT to work in parallel, i.e. file dialogs, JFrames, ImageIO, etc. can be used. Moreover, you no longer need to pass the <code class="language-plaintext highlighter-rouge">-XstartOnFirstThread</code> argument when starting a LWJGL 3 app on macOS. See <code class="language-plaintext highlighter-rouge">AwtTestLWJGL</code> in gdx-tests-lwjgl3 for an example. For more information, take a look at <a href="https://github.com/libgdx/libgdx/pull/6772">#6772</a>.</p>

<p>In addition, legacy LWJGL 3 projects must update their <code class="language-plaintext highlighter-rouge">sourceCompatibility</code> to <code class="language-plaintext highlighter-rouge">1.8</code> or higher! Otherwise an error similar to the one below will appear:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Execution failed <span class="k">for </span>task <span class="s1">':desktop:compileJava'</span><span class="nb">.</span>
<span class="o">&gt;</span> Could not resolve all files <span class="k">for </span>configuration <span class="s1">':desktop:compileClasspath'</span><span class="nb">.</span>
   <span class="o">&gt;</span> Could not resolve com.badlogicgames.gdx:gdx-backend-lwjgl3:1.11.0.
     Required by:
         project :desktop
      <span class="o">&gt;</span> No matching variant of com.badlogicgames.gdx:gdx-backend-lwjgl3:1.11.0 was found. The consumer was configured to find an API of a library compatible with Java 7, preferably <span class="k">in </span>the form of class files, and its dependencies declared externally but:
          - Variant <span class="s1">'apiElements'</span> capability com.badlogicgames.gdx:gdx-backend-lwjgl3:1.11.0 declares an API of a library, packaged as a jar, and its dependencies declared externally:
              - Incompatible because this component declares a component compatible with Java 8 and the consumer needed a component compatible with Java 7
      <span class="o">[</span>...]
</code></pre></div></div>

<p>Furthermore:</p>
<ul>
  <li>Please note that <code class="language-plaintext highlighter-rouge">Lwjgl3ApplicationConfiguration#useOpenGL3</code> was replaced by <code class="language-plaintext highlighter-rouge">#setOpenGLEmulation</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">LWJGL3Net#openURI</code> does now work on macOS &amp; JDK &gt;= 16; we also added a fallback to <code class="language-plaintext highlighter-rouge">xdg-open</code> on Linux if <code class="language-plaintext highlighter-rouge">Desktop.BROWSE</code> is unavailable</li>
  <li>Issues with LWJGL 3 and borderless fullscreen were resolved</li>
  <li>The <code class="language-plaintext highlighter-rouge">AL_DIRECT_CHANNELS_SOFT</code> option is now enabled by default for Sounds and AudioDevices as well; see <a href="https://github.com/libgdx/libgdx/pull/6527">#6527</a></li>
</ul>

<h3 id="lwjgl-3-angle-extension">LWJGL 3 ANGLE Extension</h3>
<p><a href="https://twitter.com/badlogicgames">Mario</a> also recently added a LWJGL3 <a href="https://github.com/google/angle">ANGLE</a> extension. It emulates OpenGL ES 2.0 through DirectX (Windows), desktop OpenGL (Linux), and Metal (macOS) and may become the preferred method of rendering on macOS if Apple removes OpenGL support entirely.</p>

<p>To use it, add the <code class="language-plaintext highlighter-rouge">gdx-lwjgl3-angle</code> extension to your <code class="language-plaintext highlighter-rouge">gdx-lwjgl3</code> desktop project. Then call <code class="language-plaintext highlighter-rouge">config.setOpenGLEmulation(GLEmulation.ANGLE_GLES20, 0, 0)</code> on your <code class="language-plaintext highlighter-rouge">Lwjgl3ApplicationConfiguration</code> instance before creating your <code class="language-plaintext highlighter-rouge">Lwjgl3Application</code>. Check out <a href="https://github.com/libgdx/libgdx/pull/6672">#6672</a> for more information.</p>

<p><strong>Pros:</strong></p>
<ul>
  <li>Better compatibility with systems that don’t support OpenGL 2 by using DirectX on Windows and Metal on macOS.</li>
  <li>May fix some OpenGL driver issues.</li>
</ul>

<p><strong>Cons:</strong></p>
<ul>
  <li>Does only support OpenGL ES 2.0, as the macOS ANGLE Metal backend <a href="https://github.com/google/angle#level-of-opengl-es-support-via-backing-renderers">only supports OpenGL ES 2.0</a> at this point in time.</li>
  <li>Currently contains non-working 32-bit Windows natives (see <a href="https://github.com/libgdx/libgdx/issues/6806">#6806</a>).</li>
  <li>Doesn’t support window transparency on macOS/Linux.</li>
  <li>And a few other <a href="https://github.com/libgdx/libgdx/issues?q=is%3Aissue+is%3Aopen+label%3Aangle">bugs</a>, that will need to be ironed out.</li>
</ul>

<h2 id="a-few-notable-changes">A few notable changes</h2>
<ul>
  <li>Updated to <a href="https://github.com/MobiVM/robovm/wiki/Changelog#2316-apr-2022">MobiVM 2.3.16</a> from 2.3.12. This adds iOS 15.4 bindings, native M1 support as well as other fixes and improvements, including Gradle 7 support.</li>
  <li>The GWT reflection cache was split into two generated classes, which doubles its size! (<a href="https://github.com/libgdx/libgdx/pull/6386">#6386</a>)</li>
  <li>An octree structure was added; see <a href="https://github.com/libgdx/libgdx/pull/6229">#6229</a></li>
  <li>Added <code class="language-plaintext highlighter-rouge">NWSEResize</code>, <code class="language-plaintext highlighter-rouge">NESWResize</code>, <code class="language-plaintext highlighter-rouge">AllResize</code>, <code class="language-plaintext highlighter-rouge">NotAllowed</code> and <code class="language-plaintext highlighter-rouge">None</code> system cursors; see <a href="https://github.com/libgdx/libgdx/pull/6756">#6756</a> &amp; <a href="https://github.com/libgdx/libgdx/pull/6822">#6822</a>; and <code class="language-plaintext highlighter-rouge">Graphics#setSystemCursor()</code> now works on Android as well</li>
  <li>GWT assets can now be hosted on a different URL than the Javascript files themselves (<a href="https://github.com/libgdx/libgdx/pull/6851">#6851</a>)</li>
</ul>

<h3 id="other-breaking-changes">Other breaking changes</h3>
<ul>
  <li>We increased the minimum supported iOS version to 9.0. Update your <code class="language-plaintext highlighter-rouge">Info.plist</code> file if necessary.</li>
  <li>On Android, we moved the natives loading out of static init block (see <a href="https://github.com/libgdx/libgdx/issues/5795">#5795</a>); this allows users to run code before the initialisation of the natives</li>
  <li>Shared libraries are now built on Ubuntu 18.04 (up from Ubuntu 16.04) to match the behaviour of LWJGL 3; this may make older Linux operating systems no longer compatible (see <a href="https://github.com/libgdx/libgdx/pull/6659">#6659</a>)</li>
  <li>The built-in font files <code class="language-plaintext highlighter-rouge">arial-15.fnt</code> and <code class="language-plaintext highlighter-rouge">arial-15.png</code> have been replaced with <code class="language-plaintext highlighter-rouge">lsans-15.fnt</code> and <code class="language-plaintext highlighter-rouge">lsans-15.png</code>. The new files should match the old ones very closely, but there is the possibility that it may change some text layout that uses the built-in font. Code that expects arial-15 assets to be present must change to lsans-15! (<a href="https://github.com/libgdx/libgdx/pull/6727">#6727</a>)</li>
  <li><code class="language-plaintext highlighter-rouge">AndroidApplicationConfiguration#hideStatusBar</code> was removed; see <a href="https://github.com/libgdx/libgdx/pull/6683">#6683</a></li>
</ul>

<h3 id="full-changelog">Full changelog</h3>
<p class="notice--info">Updating your Gradle project is straight-forward: Check out the instructions <a href="/wiki/articles/updating-libgdx">on the wiki</a>! The latest version of dependencies can, as always, be found <a href="/dev/versions/">here</a>.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- [BREAKING CHANGE] iOS: Increased min supported iOS version to 9.0. Update your Info.plist file if necessary.
- [BREAKING CHANGE] Android Moved natives loading out of static init block, see #5795
- [BREAKING CHANGE] Linux: Shared libraries are now built on Ubuntu 18.04 (up from Ubuntu 16.04)
- [BREAKING CHANGE] The built-in font files arial-15.fnt and arial-15.png have been replaced with lsans-15.fnt and lsans-15.png; this may change some text layout that uses the built-in font, and code that expects arial-15 assets to be present must change to lsans-15.
- [BREAKING CHANGE] Legacy LWJGL3 projects must update the sourceCompatibility to 1.8 or higher.
- [BREAKING CHANGE] Android Removed hideStatusBar configuration, see #6683
- [BREAKING CHANGE] Lwjgl3ApplicationConfiguration#useOpenGL3 was replaced by #setOpenGLEmulation
- [CONTRIBUTING] Removed Maven and Ant build systems. libGDX is now solely built with Gradle. See https://libgdx.com/dev/from-source/ for updated build instructions.
- [CONTRIBUTING] Gradle build now takes -PjavaVersion=7|8|9... to specify the Java version against which to compile libGDX. Default is Java 7 for everything, except the LWJGL3 backend, which is compiled for Java 8.
- LWJGL3 extension: Added gdx-lwjgl3-glfw-awt-macos extension. Fixes GLFW in such a way, that the LWJGL3/libGDX must no longer run on the main thread in macOS, which allows AWT to work in parallel, i.e. file dialogs, JFrames, ImageIO, etc. You no longer need to pass `-XstartOnFirstThread` when starting an LWJGL3 app on macOS. See `AwtTestLWJGL` in gdx-tests-lwjgl3. For more information, see https://github.com/libgdx/libgdx/pull/6772
- API Addition: Added LWJGL3 ANGLE support for x86_64 Windows, Linux, and macOS. Emulates OpenGL ES 2.0 through DirectX (Windows), desktop OpenGL (Linux), and Metal (macOS). May become the preferred method of rendering on macOS if Apple removes OpenGL support entirely. May fix some OpenGL driver issues. More information here: https://github.com/libgdx/libgdx/pull/6672
- iOS: Update to MobiVM 2.3.16
- Update to LWJGL 3.3.1; adds support for M1 Macs
- API Addition: ObjLoader now supports ambientColor, ambientTexture, transparencyTexture, specularTexture and shininessTexture
- API Addition: PointSpriteParticleBatch blending is now configurable.
- TOOLS Features: Blending mode and sort mode can be changed in Flame particle 3D editor.
- API Addition: Polygon methods setVertex, getVertex, getVertexCount, getCentroid.
- API Addition: TMX built-in tile property "type" is now supported.
- API Addition: Octree structure.
- API Addition: Added StringBuilder#toStringAndClear() method.
- FirstPersonCameraController keys mapping is now configurable
- Fix: GlyphLayout: Several fixes for color markup runs with multi-line or wrapping texts
- API change: GlyphLayout#GlyphRun is now one GlyphRun per line. "color" was removed from GlyphRun and is now handled by GlyphLayout.
- Gdx Setup Tool: Target Android API 30 and update AGP plugin to 4.1.3
- API Fix: Sound IDs are now properly removed; this prevents changes to music instances with the same ID
- API Fix: LWJGL3Net#openURI does now work on macOS &amp; JDK &gt;= 16
- API Fix: Fixed a possible deadlock with AssetManager#dispose() and #clear()
- API Change: Enable the AL_DIRECT_CHANNELS_SOFT option for Sounds and AudioDevices as well to fix stereo sound
- API Addition: CameraInputController#setInvertedControls(boolean)
- API Removal: AnimatedTiledMapTile#frameCount
- LWJGL 3 is now the default desktop backend. If you want to port your existing applications, take a look here: https://gist.github.com/crykn/eb37cb4f7a03d006b3a0ecad27292a2d
- Brought the official and third-party extensions in gdx-setup up to date. Removed some unmaintained ones and added gdx-websockets &amp; jbump.
- API Fix: Escaped characters in XML attributes are now properly un-escaped
- Bug Fix: AssetManager backslash conversion removed - fixes use of filenames containing backslashes
- gdx-setup now places the assets directory in project root instead of android or core. See advanced settings (UI) or arguments (command line) if you don't want it in root.
- API Fix: Resolved issues with LWJGL 3 and borderless fullscreen
- API Addition: GeometryUtils,polygons isCCW, ensureClockwise, reverseVertices
- API Addition: Added FreeTypeFontGenerator#hasCharGlyph method.
- API Fix: Pool discard method now resets object by default. This fixes the known issue about Pool in libGDX 1.10.0.
- API Addition: Split GWT reflection cache into two generated classes
- API Fix: Fix Box2D memory leak with ropes on GWT
- API Fix: Fix NPE in Type#getDeclaredAnnotation
- API Addition: Add pause/resume methods to AudioDevice
- API Fix: Protection against NullPointerException in World#destroyBody()
- API Fix: Prevent repeated mipmap generation in FileTextureArrayData
- API Fix: Fix issue with camera reference in CameraGroupStrategy’s default sorter
- API Fix: Move vertex array index buffer limit to backends to fix issue with numIndices parameter
- API Fix: TexturePacker: Fix wrong Y value when using padding
- API Fix: Lwjgl3Net: Add fallback to xdg-open on Linux if Desktop.BROWSE is unavailable
- API Addition: Add NWSEResize, NESWResize, AllResize, and NotAllowed and None SystemCursors
- API Addition: GWTApplication#getJavaHeap and getNativeHeap are now supported
- API Addition: Box2D Shape now implements Disposable
- API Addition: Added ChainShape#clear method
- API Addition: Adds Tooltip#setTouchIndependent; see #6758
- API Addition: Emulate Timer#isEmpty on GWT
- API Addition: Bits add copy constructor public Bits (Bits bitsToCpy)
- API Addition: Added List#drawSelection().
- API Addition: GwtApplicationConfiguration#xrCompatible
- API Fix: setSystemCursor() now works on Android
- API Fix: getDisplayMode() is now more accurate on Android and GWT.
- API Addition: JsonValue#iterator(String) to more easily iterate a child that may not exist.
- API Addition: Added ExtendViewport#setScaling, eg for use with Scaling.contain.
- API Addition: Added getBoundingRectangle() to Polyline
- API Addition: ShapeRenderer#check() has now protected visibility
- API Addition: Add ability to host GWT module on a different domain than the site, see #6851
- Various minor Scene2D improvements
</code></pre></div></div>]]></content><author><name></name></author><category term="news" /><category term="changelog" /><summary type="html"><![CDATA[We are proud to present a new major release of libGDX: version 1.11.0!]]></summary></entry><entry><title type="html">libGDX Jam March 2022</title><link href="https://libgdx.com/news/2022/02/jam-march-2022" rel="alternate" type="text/html" title="libGDX Jam March 2022" /><published>2022-02-28T00:00:00+00:00</published><updated>2022-02-28T00:00:00+00:00</updated><id>https://libgdx.com/news/2022/02/jam-march-2022</id><content type="html" xml:base="https://libgdx.com/news/2022/02/jam-march-2022"><![CDATA[<p>With our 20th collaboration, the <a href="/community/jams/">libGDX Jam</a> continues the time honoured tradition of making awesome games using the best framework out there. We encourage camaraderie, teamwork, and good sportsmanship with a side of well-intentioned buffoonery. The general jam rules can as always be found <a href="/community/jams/#rules">here</a>. <strong>To participate take a look at the official <a href="https://itch.io/jam/libgdx-jam-20">itch.io page of the jam</a>.</strong></p>

<p>Be sure to get involved with the community by joining the libGDX Discord server!</p>

<!-- Courtesy of embedresponsively.com //-->

<div class="responsive-video-container">
    <iframe src="https://www.youtube-nocookie.com/embed/Sugvq-oinnw" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>
  </div>

<h2 id="schedule">Schedule</h2>
<!--_The theme is yet to be determined._-->
<p>The theme is <strong>Underground</strong>. Good luck everybody!</p>

<ul>
  <li><strong>Theme Submission:</strong> 13th - 15th of March. Everyone will be allowed to submit a theme for the jam.</li>
  <li><strong>Voting:</strong> 17th - 19th of March.  Everyone will vote on their favourite theme. May the best win!</li>
  <li><strong>Jam:</strong> 20th - 26th of March. Participants will create their games and rejoice!</li>
</ul>

<h2 id="submissions">Submissions</h2>
<p>The libGDX Jam March 2022 is now over! We hope everyone had a lot of fun and are proud to present the <a href="https://itch.io/jam/libgdx-jam-20/entries">15 submissions</a>.  <!-- Don't forget to check out our [live-stream playthrough](https://youtu.be/pWZM0y5wsDI) of all the games. --></p>]]></content><author><name></name></author><category term="news" /><summary type="html"><![CDATA[With our 20th collaboration, the libGDX Jam continues the time honoured tradition of making awesome games using the best framework out there. We encourage camaraderie, teamwork, and good sportsmanship with a side of well-intentioned buffoonery. The general jam rules can as always be found here. To participate take a look at the official itch.io page of the jam.]]></summary></entry><entry><title type="html">Jam Schedule 2022</title><link href="https://libgdx.com/news/2022/01/2022-jam-dates" rel="alternate" type="text/html" title="Jam Schedule 2022" /><published>2022-01-20T00:00:00+00:00</published><updated>2022-01-20T00:00:00+00:00</updated><id>https://libgdx.com/news/2022/01/2022-jam-dates</id><content type="html" xml:base="https://libgdx.com/news/2022/01/2022-jam-dates"><![CDATA[<p>Hey everybody!</p>

<p>Today we’d like to announce our schedule for 2022’s libGDX jams. If you want to stay up to date with any future developments, be sure to join the official <a href="/community/discord/">libGDX Discord</a>! Further information about the jams – including the rules – can, as always, be found <a href="/community/jams/#rules">here</a>.</p>

<h3 id="march-2022">March 2022</h3>
<ul>
  <li>Jam Suggestions: 13th-15th</li>
  <li>Jam Voting: 17th-19th</li>
  <li>Jam: 20th-26th</li>
</ul>

<h3 id="june-2022">June 2022</h3>
<ul>
  <li>Jam Suggestions: 12th-14th</li>
  <li>Jam Voting: 16th-18th</li>
  <li>Jam: 19th-25th</li>
</ul>

<h3 id="september-2022">September 2022</h3>
<ul>
  <li>Jam Suggestions: 11th-13th</li>
  <li>Jam Voting: 15th-17th</li>
  <li>Jam: 18th-24th</li>
</ul>

<h3 id="december-2022">December 2022</h3>
<ul>
  <li>Jam Suggestions: 4th-6th</li>
  <li>Jam Voting: 8th-10th</li>
  <li>Jam: 11th-17th</li>
</ul>]]></content><author><name></name></author><category term="news" /><summary type="html"><![CDATA[It's time to announce our game jam schedule for 2022!]]></summary></entry><entry><title type="html">Status Report #8: Wiki Migration</title><link href="https://libgdx.com/news/2022/01/devlog-8-wiki-migration" rel="alternate" type="text/html" title="Status Report #8: Wiki Migration" /><published>2022-01-12T00:00:00+00:00</published><updated>2022-01-12T00:00:00+00:00</updated><id>https://libgdx.com/news/2022/01/devlog-8-wiki-migration</id><content type="html" xml:base="https://libgdx.com/news/2022/01/devlog-8-wiki-migration"><![CDATA[<p>A couple of months ago, <a href="https://github.com/github/feedback/discussions/4992#discussioncomment-1448177">GitHub enforced their exclusion of wikis from crawling</a>, leading to them not being indexed by (and thus findable via) search engines. While their reasoning behind this change is understandable (abusive behaviour in wikis has had a negative impact on their search engine ranking), this made our wiki basically invisible to users not knowing where to find it, and far less accessible to those that did. As a consequence, we <a href="https://github.com/libgdx/libgdx.github.io/issues/58">set out to look for a solution</a> and settled on moving the wiki to our <a href="/wiki/">main website</a>.</p>

<h2 id="how">How?</h2>
<p>Our old wiki was basically a bunch of markdown files located in a GitHub wiki repo. Luckily, Jekyll, the static site generator our website depends on, also uses Markdown. So, the main steps in migrating were comparatively minor. In particular, the wiki-style links (<code class="language-plaintext highlighter-rouge">[[graphics]]</code> -&gt; <code class="language-plaintext highlighter-rouge">[graphics](/wiki/graphics)</code>) and the asset paths needed changing. In addition, the pages were organised in categories to make editing easier (previously, all ~200 pages were located in one directory) and the URLs more SEO-friendly. This was done with the help of <a href="https://github.com/Spaio">@Spaio</a> – thank you very much for this! Going forward, the wiki pages are located within the <a href="https://github.com/libgdx/libgdx.github.io/tree/dev/wiki">/wiki/</a> directory of the <a href="https://github.com/libgdx/libgdx.github.io">website repo</a> and use a special version of the <a href="https://mmistakes.github.io/minimal-mistakes/">Minimal Mistakes</a> theme that we already use for the rest of the website.</p>

<h2 id="and-now">And now?</h2>
<p>The wiki can now be accessed via <a href="https://libgdx.com/wiki/">https://libgdx.com/wiki/</a>. To <strong>edit a page</strong>, use the “Edit on GitHub” link on top of each page. This will redirect you to GitHub, where you can submit a PR with your changes. We know that that makes contributing a bit of a hassle, but hope that it isn’t too much of an inconvenience.</p>

<p>Our new <strong>wiki style guide</strong> can be found <a href="/wiki/misc/wiki-style-guide">here</a>. Please give it a read before contributing.</p>

<p>As an added bonus, the migration allows us to use normal HTML, JS and CSS code in the wiki, which offers a few interesting possibilities:</p>

<style>
.example {
  background-color: yellow;
}
.example:hover {
  background-color: orange;
}
.example2 {
  padding-top: -10px;
  transform: translate(-50%, -50%);
	letter-spacing:0.1em;
  -webkit-text-fill-color: transparent;
  -webkit-text-stroke-width: 2px;
  -webkit-text-stroke-color: #eeeeee;
  text-shadow:
						8px 8px #ff1f8f,
						20px 20px #000000;
}
</style>

<ul>
  <li>Text <span style="color:blue">can</span> be <span class="example">formatted</span> in <span class="example2">various</span> new ways</li>
  <li>Videos can easily be included: <code class="language-plaintext highlighter-rouge">{% include video id="3kPK_O6Q4wA" provider="youtube" %}</code></li>
  <li>Jekyll elements like, for example, <a href="https://github.com/libgdx/libgdx.github.io/wiki/Custom-Additions#carousel">carousels</a> can be used</li>
  <li>libGDX <a href="/wiki/misc/wiki-style-guide#adding-gwt-examples">GWT apps can be embedded</a> on wiki pages, allowing us to showcase live libGDX examples</li>
  <li>We have also recently added a <a href="/wiki/search">search feature</a> to the wiki</li>
  <li>Every code example now features a “Copy to clipboard” button</li>
</ul>

<p>Feedback on this migration is very much welcome – just join our <a href="/community/discord/">Discord</a> and let us know what you think!</p>]]></content><author><name></name></author><category term="news" /><category term="devlog" /><summary type="html"><![CDATA[We moved our GitHub wiki to the libGDX website!]]></summary></entry><entry><title type="html">libGDX Jam December 2021</title><link href="https://libgdx.com/news/2021/12/jam-december-2021" rel="alternate" type="text/html" title="libGDX Jam December 2021" /><published>2021-12-01T00:00:00+00:00</published><updated>2021-12-01T00:00:00+00:00</updated><id>https://libgdx.com/news/2021/12/jam-december-2021</id><content type="html" xml:base="https://libgdx.com/news/2021/12/jam-december-2021"><![CDATA[<p>With our 19th collaboration, the <a href="/community/jams/">libGDX Jam</a> continues the time honoured tradition of making awesome games using the best framework out there. We encourage camaraderie, teamwork, and good sportsmanship with a side of well-intentioned buffoonery. The general jam rules can as always be found <a href="/community/jams/#rules">here</a>. <strong>To participate take a look at the official <a href="https://itch.io/jam/libgdx-jam-19">itch.io page of the jam</a>.</strong></p>

<p>Be sure to get involved with the community by joining the libGDX Discord server!</p>

<!-- Courtesy of embedresponsively.com //-->

<div class="responsive-video-container">
    <iframe src="https://www.youtube-nocookie.com/embed/dy1ixi8I7Ik" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>
  </div>

<h2 id="schedule">Schedule</h2>
<!--_The theme is yet to be determined._-->
<p>The theme is <strong>Machines &amp; Slimes</strong>. Good luck everybody!</p>

<ul>
  <li><strong>Theme Submission:</strong> 5th - 7th of December. Everyone will be allowed to submit a theme for the jam.</li>
  <li><strong>Voting:</strong> 9th - 11th of December.  Everyone will vote on their favourite theme. May the best win!</li>
  <li><strong>Jam:</strong> 12th - 18th of December. Participants will create their games and rejoice!</li>
</ul>

<h2 id="submissions">Submissions</h2>
<p>The libGDX Jam December 2021 is now over! We hope everyone had a lot of fun and are proud to present the <a href="https://itch.io/jam/libgdx-jam-19/entries">10 submissions</a>.  <!-- Don't forget to check out our [live-stream playthrough](https://youtu.be/pWZM0y5wsDI) of all the games. --></p>

<p>We’ll see you again next year!</p>]]></content><author><name></name></author><category term="news" /><summary type="html"><![CDATA[With our 19th collaboration, the libGDX Jam continues the time honoured tradition of making awesome games using the best framework out there. We encourage camaraderie, teamwork, and good sportsmanship with a side of well-intentioned buffoonery. The general jam rules can as always be found here. To participate take a look at the official itch.io page of the jam.]]></summary></entry><entry><title type="html">libGDX Jam September 2021</title><link href="https://libgdx.com/news/2021/09/jam-september-2021" rel="alternate" type="text/html" title="libGDX Jam September 2021" /><published>2021-09-01T00:00:00+00:00</published><updated>2021-09-01T00:00:00+00:00</updated><id>https://libgdx.com/news/2021/09/jam-september-2021</id><content type="html" xml:base="https://libgdx.com/news/2021/09/jam-september-2021"><![CDATA[<p>With our 18th collaboration, the <a href="/community/jams/">libGDX Jam</a> continues the time honoured tradition of making awesome games using the best framework out there. We encourage camaraderie, teamwork, and good sportsmanship with a side of well-intentioned buffoonery. The general jam rules can as always be found <a href="/community/jams/#rules">here</a>. <strong>To participate take a look at the official <a href="https://itch.io/jam/libgdx-jam-18">itch.io page of the jam</a>.</strong></p>

<p>Be sure to get involved with the community by joining the libGDX Discord server!</p>

<!-- Courtesy of embedresponsively.com //-->

<div class="responsive-video-container">
    <iframe src="https://www.youtube-nocookie.com/embed/4P3oQdkflSw" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>
  </div>

<h2 id="schedule">Schedule</h2>
<!--_The theme is yet to be determined._-->
<p>The theme is <strong>Zero Gravity!</strong>. Good luck everybody!</p>

<ul>
  <li><strong>Theme Submission:</strong> 12th - 14th of September. Everyone will be allowed to submit a theme for the jam.</li>
  <li><strong>Voting:</strong> 16th - 18th of September.  Everyone will vote on their favourite theme. May the best win!</li>
  <li><strong>Jam:</strong> 19th - 25th of September. Participants will create their games and rejoice!</li>
</ul>

<h2 id="submissions">Submissions</h2>
<p>The libGDX Jam September 2021 is now over! We hope everyone had a lot of fun and are proud to present the <a href="https://itch.io/jam/libgdx-jam-18/entries">18 submissions</a>.  Don’t forget to check out our <a href="https://youtu.be/pWZM0y5wsDI">live-stream playthrough</a> of all the games. Developer Doge has also recorded an excellent (and hilarious) video of him playing the games, which can be found <a href="https://youtu.be/Al_QDQccLFM">here</a>.</p>

<p>We’ll see you again in December!</p>]]></content><author><name></name></author><category term="news" /><summary type="html"><![CDATA[With our 18th collaboration, the libGDX Jam continues the time honoured tradition of making awesome games using the best framework out there. We encourage camaraderie, teamwork, and good sportsmanship with a side of well-intentioned buffoonery. The general jam rules can as always be found here. To participate take a look at the official itch.io page of the jam.]]></summary></entry><entry><title type="html">Status Report #7: LWJGL 3</title><link href="https://libgdx.com/news/2021/07/devlog-7-lwjgl3" rel="alternate" type="text/html" title="Status Report #7: LWJGL 3" /><published>2021-07-24T00:00:00+00:00</published><updated>2021-07-24T00:00:00+00:00</updated><id>https://libgdx.com/news/2021/07/devlog-7-lwjgl3</id><content type="html" xml:base="https://libgdx.com/news/2021/07/devlog-7-lwjgl3"><![CDATA[<p>In the next release of libGDX we are switching our default desktop backend from LWJGL 2 to LWJGL 3. This Status Report is meant to provide some background information on this change.</p>

<h3 id="what-is-lwjgl">What is LWJGL?</h3>
<p>The <a href="https://www.lwjgl.org/">Lightweight Java Game Library</a> (LWJGL) is an <a href="https://github.com/LWJGL/lwjgl3">open-source</a> Java library that provides bindings to a number of C and C++ libraries used for game development, in particular OpenGL, OpenAL and Vulkan. The desktop backends of libGDX build upon LWJGL and wrap its low-level bindings in our cross-platform compatible API to provide graphics and audio.</p>

<h3 id="why-version-3">Why version 3?</h3>
<p>Version 3 of LWJGL 3 was announced at the end of 2014 and had its first release on 4 June 2016. It is a complete rewrite of LWJGL, with the biggest change being the move from LWJGL2’s own windowing system to <a href="https://www.glfw.org">GLFW</a>. The first version of libGDX’s LWJGL 3 backend was made public back <a href="https://github.com/libgdx/libgdx/issues/3673">in 2015</a> together with a call for testing. Since then we have continually improved upon this initial release.</p>

<p>There were a couple of reasons for us to start working on a LWJGL 3 backend, the most obvious being the discontinuation of LWJGL 2, which had its last release in January of 2015. In addition, LWJGL 3 provides considerably better support for <a href="https://github.com/libgdx/libgdx/issues/6426">current JREs, macOS, Linux</a> (including <a href="/news/2020/08/devlog_1_road_ahead#linux-arm-builds">Raspberry Pis</a>), and <a href="https://github.com/libgdx/libgdx/blob/master/tests/gdx-tests-lwjgl3/src/com/badlogic/gdx/tests/lwjgl3/MultiWindowTest.java">multi-window environments</a>.</p>

<h3 id="how-can-i-migrate">How can I migrate?</h3>
<p>To switch your existing libGDX projects to the LWJGL 3 desktop backend you need to follow two steps:</p>

<ol>
  <li>
    <p>Open your root <code class="language-plaintext highlighter-rouge">build.gradle</code> file and replace the LWJGL backend dependency:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>api "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
</code></pre></div>    </div>

    <p>with the LWJGL 3 backend dependency:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>api "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
</code></pre></div>    </div>

    <p>Make sure to refresh your Gradle dependencies in your IDE.</p>
  </li>
  <li>
    <p>Next up, you need to fix your <code class="language-plaintext highlighter-rouge">DesktopLauncher</code> class. It is located in your desktop project and should look something like this:</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DesktopLauncher</span> <span class="o">{</span>
   <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span> <span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">arg</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">LwjglApplicationConfiguration</span> <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LwjglApplicationConfiguration</span><span class="o">();</span>
      <span class="k">new</span> <span class="nf">LwjglApplication</span><span class="o">(</span><span class="k">new</span> <span class="nc">MyGdxGame</span><span class="o">(),</span> <span class="n">config</span><span class="o">);</span>
   <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>    </div>

    <p>Change it to this:</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DesktopLauncher</span> <span class="o">{</span>
   <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span> <span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">arg</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">Lwjgl3ApplicationConfiguration</span> <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Lwjgl3ApplicationConfiguration</span><span class="o">();</span>
      <span class="k">new</span> <span class="nf">Lwjgl3Application</span><span class="o">(</span><span class="k">new</span> <span class="nc">MyGdxGame</span><span class="o">(),</span> <span class="n">config</span><span class="o">);</span>
   <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>    </div>
    <p><br /></p>
  </li>
</ol>

<h3 id="do-i-need-to-do-anything-else">Do I need to do anything else?</h3>
<p>If you are on Windows or Linux, you are all set!</p>

<p>However, if you are on <strong>macOS</strong>, there is another step involved in getting your applications to run with the LWJGL 3 backend. Since libGDX 1.11.0, you can either add the gdx-lwjgl3-glfw-awt-macos dependency to your desktop project (<code class="language-plaintext highlighter-rouge">api "com.badlogicgames.gdx:gdx-lwjgl3-glfw-awt-macos:$gdxVersion"</code>; on Windows and Linux the extension is ignored) or you can run the JVM with the <a href="https://github.com/LWJGL/lwjgl3/blob/572f69802cb2d4930777403c73999c3e01de9d56/modules/lwjgl/glfw/src/main/java/org/lwjgl/glfw/EventLoop.java#L14-L23"><code class="language-plaintext highlighter-rouge">-XstartOnFirstThread</code></a> argument on macOS. This ensures that your application’s <code class="language-plaintext highlighter-rouge">main()</code> method runs on the first (i.e., the AppKit) thread and will be familiar to those of you with experiences with SWT.</p>

<p>Typically, the argument can be set in the Launch/Run Configurations of your IDE, as is described <a href="/wiki/start/import-and-running">here</a>. Alternatively, if you’re starting your project via Gradle, add this line to the <code class="language-plaintext highlighter-rouge">run</code> task of the desktop Gradle file:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    jvmArgs = ['-XstartOnFirstThread']
</code></pre></div></div>
<p>Another viable approach for <em>outside of your development environment</em> is to just programatically restart the JVM if the argument is not present (see <a href="https://github.com/crykn/guacamole/blob/master/gdx-desktop/src/main/java/de/damios/guacamole/gdx/StartOnFirstThreadHelper.java#L69">here</a> for a simple example). Alternatively, if you want to deploy your game by packaging a JRE with it (which is the recommended way to distribute your game), jpackage or packr allow you to set the JVM arguments.</p>

<h3 id="are-there-any-other-things-i-need-to-be-aware-of">Are there any other things I need to be aware of?</h3>
<ul>
  <li>Whenever your <strong>application is minimised</strong>, the LWJGL 3 backend calls <code class="language-plaintext highlighter-rouge">ApplicationListener#resize(0, 0)</code>. This can lead to unexpected issues, in particular if you are (re)building framebuffers whenever the application is resized.</li>
  <li>To use <strong>Swing or AWT</strong> APIs, you’ll have to depend on the gdx-lwjgl3-glfw-awt-macos extension. See <code class="language-plaintext highlighter-rouge">AwtTestLWJGL</code> in gdx-tests-lwjgl3 for an example.</li>
  <li>The LWJGL 3 backend does <a href="https://github.com/libgdx/libgdx/pull/6247">not yet</a> have an equivalent for <code class="language-plaintext highlighter-rouge">LwjglAWTCanvas</code> and <code class="language-plaintext highlighter-rouge">LwjglAWTFrame</code>.</li>
  <li>As the graphical tools in <strong>gdx-tools</strong> require the <code class="language-plaintext highlighter-rouge">LwjglAWTCanvas</code> class, the library has a hard dependency on LWJGL 2. If you are using one of the non-graphical tools of the gdx-tools project (in particular <a href="/wiki/tools/texture-packer#from-source">TexturePacker</a>) and the LWJGL 3 backend <em>in the same (!) project</em>, you need to modify your gdx-tools dependency like this:
    <div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">compile</span> <span class="o">(</span><span class="s2">"com.badlogicgames.gdx:gdx-tools:$gdxVersion"</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">exclude</span> <span class="nl">group:</span> <span class="s1">'com.badlogicgames.gdx'</span><span class="o">,</span> <span class="nl">module:</span> <span class="s1">'gdx-backend-lwjgl'</span>
 <span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><br /></p>

<p>And that was it for today’s Status Report – see you all in #8!</p>]]></content><author><name></name></author><category term="news" /><category term="devlog" /><summary type="html"><![CDATA[Find out everything about our LWJGL 3 desktop backend!]]></summary></entry><entry><title type="html">Community Showcase: colorful-gdx</title><link href="https://libgdx.com/news/2021/06/colorful-gdx" rel="alternate" type="text/html" title="Community Showcase: colorful-gdx" /><published>2021-06-05T00:00:00+00:00</published><updated>2021-06-05T00:00:00+00:00</updated><id>https://libgdx.com/news/2021/06/colorful-gdx</id><content type="html" xml:base="https://libgdx.com/news/2021/06/colorful-gdx"><![CDATA[<div class="notice--primary">
   <p>
     Hey everybody! As announced a few months ago, we want to give creators of interesting community projects the opportunity to present their exciting libraries or tools on the official blog. In this <b>Community Showcase</b>, Tommy Ettinger is going to present his <a href="https://github.com/tommyettinger/colorful-gdx">colorful-gdx library</a>!
   </p>
   <p>
     If you are interested in other cool community projects, be sure to check out the <a href="https://github.com/rafaskb/awesome-libgdx#readme">libGDX Awesome List</a> as well. To participate in future showcases, take a look <a href="https://github.com/libgdx/libgdx.github.io/wiki/Community-Showcases">here</a>.
   </p>
 </div>

<h1 id="colorful-gdx">colorful-gdx</h1>

<h2 id="what-does-it-do">What does it do?</h2>

<p>With colorful-gdx, you can tint Sprites and other images with colors in different color spaces than what libGDX offers
by default. Most importantly, this means you can use a batch color to lighten as well as darken an image, but there are
many other features that come along with this. There’s a really wide range of operations you can do to blend or mix
multiple colors (without creating temporary objects), edit properties of a color, and describe colors with a simple
String syntax, if you want.</p>

<p>It doesn’t feel right to start a showcase for a very visual library without some eye candy, so here’s a visualization of
different color spaces and their different shapes. It’s here because it looks cool and was made with this library; in
practice you don’t need to know about this.</p>

<p><img src="/assets/images/posts/2021-06-05/color_solids.png" alt="" /></p>

<h2 id="how-does-it-work">How does it work?</h2>

<p>There’s a few ways you can use colorful-gdx. Technically, the repo is split into two subprojects, but if you’re working
with libGDX, you almost always want <code class="language-plaintext highlighter-rouge">colorful</code>, which uses libGDX for its Color, Batch, ShaderProgram, and other
classes. I’ll skip over installation details; the repo covers the Gradle dependency, or you could use gdx-liftoff’s
third-party extensions to get a recent version of <code class="language-plaintext highlighter-rouge">colorful</code>.</p>

<p>Your first choice is, “What color space should I use?” To answer this, you need to know what a color space is. You
already know at least one, RGBA – Color in libGDX uses it, as does almost everything on a computer screen. The other
options are less widely-known, and some are mostly in colorful-gdx for historical reasons. Generally, the choice is
between <code class="language-plaintext highlighter-rouge">rgb</code> and <code class="language-plaintext highlighter-rouge">oklab</code>.</p>

<p>With RGB, you have 3 channels, red/green/blue, plus alpha, and you can make a color lighter by raising the RGB channels
or darker by lowering those channels. You can easily make a color more red by raising the red channel, and the same with
green or blue. What if you want to make a color more orange? This is more of a challenge, and typically requires raising
red and lowering blue, which can change lightness.</p>

<p>A solution for that type of issue lies in
<a href="https://bottosson.github.io/posts/oklab/">Oklab, a newer color space by Björn Ottosson</a>. Oklab also has 3 channels, but
they are L, A, and B (plus alpha, which is the same as before). L is lightness, and you can change the lightness of a
color smoothly just by increasing or decreasing L. A and B are what are called “chromatic axes,” and in our usage they
range from 0.0 to 1.0. When A is near 0.0, the color is going to be close to green; when it is near 1.0, the color is
going to be close to red. When B is near 0.0, the color is going to be close to blue; when it is near 1.0, the color is
going to be close to yellow. When both A and B are close to 0.5, the color is likely to be either grayish or actually
grayscale. As L gets closer to 0.0 or 1.0, the span of A and B shrinks, and all colors that are nearly black or nearly
white have A and B that are close to 0.5 (meaning they’re close to grayscale colors like black and white). If you want
to keep the lightness of a color constant while making it more orange, you would do so by raising both A (more red) and
B (more yellow), and leaving L alone.</p>

<p>Your choice between these two color spaces (or others, if you really want) mostly boils down to whether you want to edit
colors based on their lightness, saturation, and other qualities as single numbers (which makes Oklab an excellent
choice), or whether you just want a simple and compatible way to make a sprite extra-bright, extra-dark,
extra-red/green/blue, etc. and don’t want to deal with these blasted newfangled color contraptions (which is why I
provide the RGB color space).</p>

<p>Once you have an idea of what you want, you’d either make a <code class="language-plaintext highlighter-rouge">SpriteBatch</code> with a different <code class="language-plaintext highlighter-rouge">ShaderProgram</code> drawn from
colorful’s <code class="language-plaintext highlighter-rouge">Shaders.java</code>, or you’d skip that and just use the more-powerful but less-compatible <code class="language-plaintext highlighter-rouge">ColorfulBatch</code> for
your chosen color space. Either way, you gain the ability to add to color channels as well as subtract, which lets you
brighten and darken sprites by setting the batch color.</p>

<h2 id="thats-all">That’s all?</h2>
<p>Yes, almost all the library winds up as a glorified way to set and interpret the batch color. Also, no, there are lots
of ways to get the batch color just right, or blend across frames, or analyze colors, or edit colors in different ways,
and so on and so forth. <code class="language-plaintext highlighter-rouge">ColorfulBatch</code> in particular adds extra options because it effectively has two batch colors –
one is called the “tweak,” and multiplies a channel, while the other is the normal batch color, which is added after the
tweak is applied. There’s a potentially-interesting feature here, too – one of the components of the tweak allows
configuring contrast, by making mid-range values either push even closer to the middle of the range, or pull even
further apart to make somewhat-similar colors appear different in lightness.</p>

<p>There are relatively large predefined palettes here. They store the colors as <code class="language-plaintext highlighter-rouge">float</code> (one <code class="language-plaintext highlighter-rouge">float</code> per color, which is
also called a “packed float color”), and those can be set in a <code class="language-plaintext highlighter-rouge">SpriteBatch</code> or <code class="language-plaintext highlighter-rouge">ColorfulBatch</code> using the
<code class="language-plaintext highlighter-rouge">setPackedFloat()</code> method. You can also edit colors with your chosen color space’s <code class="language-plaintext highlighter-rouge">ColorTools</code> class, or the shared
<code class="language-plaintext highlighter-rouge">FloatColors</code> class. This last one handles mixing colors, which is a feature you don’t want to miss! You can also mix
colors in the <code class="language-plaintext highlighter-rouge">SimplePalette</code> class by describing one or more colors from that palette in a String, along with
adjustments like “light” or “richest” that change the resulting <code class="language-plaintext highlighter-rouge">float</code>. This uses Strings like “darker dull blue gray
violet” to describe a grayish blue-purple.
<a href="https://tommyettinger.github.io/colorful-gdx/description/">You can preview the descriptions here</a>; press the square
bracket keys to change modes from RGB to Oklab or a comparison.</p>

<p>There’s a lot of tricks you can uncover in colorful-gdx. Many effects are possible by doing things like reducing the
range of lightness, or colorful-ness, and then applying a change. Other effects can be cycling hues (always a fun
psychedelic effect), raising and lowering lightness to correspond to time of day in a game, using Oklab for smooth
blends and then converting back to RGBA, and various other useful tools.</p>

<p>Here’s an example of such a nice trick. <code class="language-plaintext highlighter-rouge">ColorfulBatch</code> is a decent option for RGB, but it’s a great option for Oklab.
Because the tweak in Oklab works differently from the tweak in RGB, you can multiply by a small value for both A and B
to make the color grayish, or a high value to make the color especially vivid. RGB doesn’t have an option like this
other than using a low tweak value for R, G, and B, then moving the channels where you want them with the additive
color. That works by reducing the color to essentially black or close to it, then adding a color of your choice. Oklab
only reduces the color to grayish, keeping the lightness, so you can add values to L, A, and B that push the color to a
more-whatever-hue direction while maintaining or changing lightness as you want and possibly some original A and B.</p>

<p>If you’re worried about performance, this is not going to hurt anything. Using floats for colors avoids creating
excessive garbage objects, and the shaders that handle color conversions are simple (for a GPU to execute) and
branchless. If you’re going back and forth between a shader from colorful-gdx (or a ColorfulBatch) and some other
shader, there will be a performance penalty based on the number of shader changes per frame, but 3D graphics in libGDX
involves frequent shader changes, and those work just fine.</p>

<h2 id="how-do-i-use-it">How do I use it?</h2>

<h3 id="setup">Setup</h3>

<p>For instructions on importing colorful into your project, <a href="https://github.com/tommyettinger/colorful-gdx#how-to-obtain">see here</a>.
Version 0.6.0 just released and may be a little rough in places, but it includes several fixes to 0.5.1, so you’ll
probably want the latest version. You can ignore colorful-pure unless you want to manipulate colors server-side.</p>

<p>If you don’t want to use a <code class="language-plaintext highlighter-rouge">ColorfulBatch</code>, you’ll want to take a <code class="language-plaintext highlighter-rouge">SpriteBatch</code> (which you probably already have used)
and set its shader to one from <code class="language-plaintext highlighter-rouge">Shaders</code>.</p>

<p>For RGB, this could look like:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">SpriteBatch</span> <span class="n">batch</span> <span class="o">=</span> <span class="n">batch</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SpriteBatch</span><span class="o">(</span><span class="mi">1000</span><span class="o">,</span> <span class="nc">Shaders</span><span class="o">.</span><span class="na">makeRGBAShader</span><span class="o">());</span>
</code></pre></div></div>

<p>Or, you could make the shader yourself, which is the only way for most of the shaders:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">SpriteBatch</span> <span class="n">batch</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SpriteBatch</span><span class="o">();</span>
<span class="nc">ShaderProgram</span> <span class="n">shader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ShaderProgram</span><span class="o">(</span><span class="n">vertexShader</span><span class="o">,</span> <span class="n">fragmentShaderRGBA</span><span class="o">);</span>
<span class="k">if</span><span class="o">(!</span><span class="n">shader</span><span class="o">.</span><span class="na">isCompiled</span><span class="o">())</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">GdxRuntimeException</span><span class="o">(</span><span class="s">"Couldn't compile shader: "</span> <span class="o">+</span> <span class="n">shader</span><span class="o">.</span><span class="na">getLog</span><span class="o">());</span>
<span class="n">batch</span><span class="o">.</span><span class="na">setShader</span><span class="o">(</span><span class="n">shader</span><span class="o">);</span>
</code></pre></div></div>

<p>For Oklab, the second of those options is the only option if you aren’t using <code class="language-plaintext highlighter-rouge">ColorfulBatch</code>:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">SpriteBatch</span> <span class="n">batch</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SpriteBatch</span><span class="o">();</span>
<span class="nc">ShaderProgram</span> <span class="n">shader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ShaderProgram</span><span class="o">(</span><span class="n">vertexShader</span><span class="o">,</span> <span class="n">fragmentShaderOklab</span><span class="o">);</span>
<span class="k">if</span><span class="o">(!</span><span class="n">shader</span><span class="o">.</span><span class="na">isCompiled</span><span class="o">())</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">GdxRuntimeException</span><span class="o">(</span><span class="s">"Couldn't compile shader: "</span> <span class="o">+</span> <span class="n">shader</span><span class="o">.</span><span class="na">getLog</span><span class="o">());</span>
<span class="n">batch</span><span class="o">.</span><span class="na">setShader</span><span class="o">(</span><span class="n">shader</span><span class="o">);</span>
</code></pre></div></div>

<p>If you are using <code class="language-plaintext highlighter-rouge">ColorfulBatch</code>, then usage looks like a normal SpriteBatch for now:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Note, there are multiple ColorfulBatch classes in different packages.</span>
<span class="c1">// You use the com.github.tommyettinger.colorful.rgb package for RGB.</span>
<span class="c1">// You use the com.github.tommyettinger.colorful.oklab package for Oklab.</span>
<span class="nc">ColorfulBatch</span> <span class="n">batch</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ColorfulBatch</span><span class="o">();</span>
</code></pre></div></div>

<h3 id="tinting">Tinting</h3>
<p>Once you have your Batch, you can set a color on it right away with <code class="language-plaintext highlighter-rouge">setPackedColor(float)</code>. As mentioned earlier,
colorful-gdx almost always stores colors as “packed” floats in colorful-gdx, and many are predefined in <code class="language-plaintext highlighter-rouge">Palette</code> and/or
<code class="language-plaintext highlighter-rouge">SimplePalette</code> in your color space’s package. There’s no need to use the specific colors in Palette and SimplePalette
in your game, and to be honest, some names in Palette are pretty bad. Give me a break, I had to name 256 of them! 
SimplePalette has simpler names, as one might expect, all of them one word. You can browse the colors on colorful-gdx’s
(bare-bones) web pages:</p>

<ul>
  <li><a href="https://tommyettinger.github.io/colorful-gdx/ColorTableOklab.html">Palette, by name, Oklab</a></li>
  <li><a href="https://tommyettinger.github.io/colorful-gdx/ColorTableHueOklab.html">Palette, by hue, Oklab</a></li>
  <li><a href="https://tommyettinger.github.io/colorful-gdx/ColorTableValueOklab.html">Palette, by lightness, Oklab</a></li>
  <li><a href="https://tommyettinger.github.io/colorful-gdx/ColorTableRGB.html">Palette, by name, RGB</a></li>
  <li><a href="https://tommyettinger.github.io/colorful-gdx/ColorTableHueRGB.html">Palette, by hue, RGB</a></li>
  <li><a href="https://tommyettinger.github.io/colorful-gdx/ColorTableValueRGB.html">Palette, by lightness, RGB</a></li>
  <li><a href="https://tommyettinger.github.io/colorful-gdx/ColorTableSimpleOklab.html">SimplePalette, by name, Oklab</a></li>
  <li><a href="https://tommyettinger.github.io/colorful-gdx/ColorTableHueSimpleOklab.html">SimplePalette, by hue, Oklab</a></li>
  <li><a href="https://tommyettinger.github.io/colorful-gdx/ColorTableValueSimpleOklab.html">SimplePalette, by lightness, Oklab</a></li>
  <li><a href="https://tommyettinger.github.io/colorful-gdx/ColorTableSimpleRGB.html">SimplePalette, by name, RGB</a></li>
  <li><a href="https://tommyettinger.github.io/colorful-gdx/ColorTableHueSimpleRGB.html">SimplePalette, by hue, RGB</a></li>
  <li><a href="https://tommyettinger.github.io/colorful-gdx/ColorTableValueSimpleRGB.html">SimplePalette, by lightness, RGB</a></li>
</ul>

<p>The Oklab pages show the <code class="language-plaintext highlighter-rouge">L</code>, <code class="language-plaintext highlighter-rouge">A</code>, and <code class="language-plaintext highlighter-rouge">B</code> channel values for each color, while the RGB pages already have their
channels displayed in the RGBA8888 <code class="language-plaintext highlighter-rouge">hex code</code> column, and don’t repeat that info. Both show <code class="language-plaintext highlighter-rouge">Hue</code> and <code class="language-plaintext highlighter-rouge">Saturation</code> as
columns, but RGB also shows <code class="language-plaintext highlighter-rouge">Lightness</code>, while Oklab already showed that in its <code class="language-plaintext highlighter-rouge">L</code> column. Alternatively, you can do
what I do:  look at the pretty colors, then copy a name when I’ve found one I like (I really like the “by hue” pages
for this).</p>

<p>Tinting with one of these predefined colors is easy:</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">batch</span><span class="o">.</span><span class="na">setPackedColor</span><span class="o">(</span><span class="nc">Palette</span><span class="o">.</span><span class="na">DEEP_PURPLE</span><span class="o">);</span>
</code></pre></div></div>

<p>This sets the tint to a very dark, bold purple, which darkens the shown Textures and makes them much more purple in hue.</p>

<p>If you didn’t specify a tint, that’s the same as using the neutral color
for your color space, which is <code class="language-plaintext highlighter-rouge">Palette.GRAY</code> for both the <code class="language-plaintext highlighter-rouge">rgb</code> and <code class="language-plaintext highlighter-rouge">oklab</code> color spaces. The neutral color causes no
change to the original colors in Textures you draw. In libGDX normally, the neutral color is white. Like in a normal
libGDX SpriteBatch, if you use a darker color than the neutral color, then the shown Textures get darker. Unlike in a
normal libGDX SpriteBatch, there are colors that are lighter than the neutral color – there are colors like
<code class="language-plaintext highlighter-rouge">Palette.LIGHT_GRAY</code> here, but nothing can be lighter than white. If you set the batch color to a lighter color, then
the shown textures will be lighter. There’s a scale here of grayscale colors (the colors in the “Palette, by hue” pages
above have them between Black and White), and all grayscale colors don’t affect the hue or saturation of Textures. This
is a key detail; colors that aren’t exactly grayscale, but are still grayish, will have less effect on hue and
saturation than very saturated, vivid colors. Using vibrant colors will mean very strong, possibly-overpowering tints,
and all levels of saturation can be useful for something. If you want to take an already-saturated Texture and
desaturate it, then you need something more than what SpriteBatch can provide; it will take ColorfulBatch and <em>one whole
extra line</em> of code. It is time to master… the twerk. I mean, tweak.
<a href="https://github.com/libgdx/libgdx/pull/6080">It’s an easy typo!</a></p>

<h3 id="tweaking">Tweaking</h3>
<p>Here, things get more advanced; the rabbit hole goes deeper, and your colorful talents become far more powerful.
It is true that setting the tweak on a ColorfulBatch is just one line:</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">colorfulBatch</span><span class="o">.</span><span class="na">setTweak</span><span class="o">(</span><span class="mf">0.5f</span><span class="o">,</span> <span class="mf">0.1f</span><span class="o">,</span> <span class="mf">0.1f</span><span class="o">,</span> <span class="mf">0.65f</span><span class="o">);</span>
</code></pre></div></div>
<p>In an Oklab ColorfulBatch, this has the effect of making colors much less saturated (but not fully black-and-white), and
slightly increasing the lightness contrast between mid-lightness colors. If you ran that with an RGB ColorfulBatch…
well, the contrast would still increase, but blue and green would be mostly removed, making an image in shades of red.
You may want to avoid using the RGB ColorfulBatch tweak heavily, or only use it for its contrast (the last parameter).
In both RGB and Oklab, 0.5 is the neutral value for all tweak channels. This is different from the neutral color, which
is either <code class="language-plaintext highlighter-rouge">(0.5f, 0.5f, 0.5f, 1f)</code> for RGB or <code class="language-plaintext highlighter-rouge">(0.63f, 0.5f, 0.5f, 1f)</code> for Oklab (both are <code class="language-plaintext highlighter-rouge">Palette.GRAY</code>). The tweak
channels are a little different from the color channels. Instead of <code class="language-plaintext highlighter-rouge">red, green, blue, alpha</code> or <code class="language-plaintext highlighter-rouge">L, A, B, alpha</code>,
<code class="language-plaintext highlighter-rouge">alpha</code> is replaced with <code class="language-plaintext highlighter-rouge">contrast</code>, and instead of the other channels (RGB or LAB) adding to the Texture color, they
are multiplied. Because RGB and Oklab are pretty different in several areas, I’ll go over them one at a time, but since
contrast is the same for both, that comes first.</p>

<h3 id="contrast">Contrast</h3>
<p>In tweaks, you don’t really need extra changes to alpha, so the fourth parameter to a tweak value sets its contrast. The
contrast is neutral at 0.5, sharpens lightness contrast above 0.5, and fades away lightness contrast below 0.5. Fading
isn’t especially obvious, but sharpening can be a nice way to highlight specific elements. Because the neutral value for
tweaks is different from the neutral value for colors, <code class="language-plaintext highlighter-rouge">ColorfulBatch</code> defines the constant <code class="language-plaintext highlighter-rouge">TWEAK_RESET</code> for the
tweak’s neutral value. If you used a color for a tweak value, you’d see maximum contrast, because colors have 1.0 alpha
and that would become the starkest contrast if used in the tweak.</p>

<h3 id="rgb">RGB</h3>
<p>Using a value larger than 0.5 for one of a tweak’s RGB channels (let’s call that value <code class="language-plaintext highlighter-rouge">tweak_channel</code>) will magnify
that channel, effectively multiplying the channel in the texture by <code class="language-plaintext highlighter-rouge">2f * tweak_channel</code>. Using a value smaller than 0.5
for one of a tweak’s RGB channels does the same thing, but because <code class="language-plaintext highlighter-rouge">2f * tweak_channel</code> is less than 1, it will shrink
that channel, bringing all values in the Texture closer to 0 in that channel. You usually need to make use of the tweak
and color together in an RGB ColorfulBatch if you use the tweak at all. For instance, you can bring all colors closer to
medium-lightness by using a tweak of <code class="language-plaintext highlighter-rouge">(0.3f, 0.3f, 0.3f, 0.5f)</code> and a color of <code class="language-plaintext highlighter-rouge">(0.7f, 0.7f, 0.7f, 1f)</code>. In steps, the
tweak first makes the RGB channels shrink in range from 0 through 1 to 0 through 0.6, because the tweak channels are
multiplied by 2 and then by the Texture colors. Then, the color is added in; because <code class="language-plaintext highlighter-rouge">0.7f</code> is <code class="language-plaintext highlighter-rouge">0.2f</code> more than the
neutral value for RGB, this adds <code class="language-plaintext highlighter-rouge">0.2f</code> to the RGB channels. This takes the range from 0 through 0.6, where we left off,
to 0.2 through 0.8. This eliminates pure black and pure white, squishing all colors into a middle-lightness area.</p>

<h3 id="oklab">Oklab</h3>
<p>Oklab is a little different, and at this point, a visual aid is in order.</p>

<p><img src="/assets/images/posts/2021-06-05/oklab.png" alt="" /></p>

<p>This animation shows the Oklab “gamut,” or the range of colors that can be correctly represented without clipping.
The first frame is at 0 lightness, and is a single point of black (that doesn’t render). As the animation goes on, the
lightness goes up, and you can start to see that while the very center is still grayish, the edges are more colorful.
As the animation ends, lightness approaches 1 (white), and all the colors are forced closer to grayscale again. The x
axis is the A channel, and the y axis is the B channel. If you start in the center and go to the right, you get more of
a red color. If you instead go to the left, more green (well, cyan). If you go up, more yellow, and if you go down, more
blue. <strong>When you use the tweak in Oklab</strong>, the tweak can still magnify or shrink A and B, but it does so relative to the
center (grayscale), rather than black like in RGB. This is what makes Oklab’s tweak more useful; not only is lightness
simple to adjust with just one channel (L), colorful-ness is simple to adjust by using the same change for the A and B
channels. Adjusting L isn’t centered like A and B are; if you increase L on the tweak, it will make lightness range
higher but no lower, and if you decrease it, the lightest colors become unavailable. The color can be useful with any
kind of reduced range, moving L so a range like 0.0 through 0.4 is raised up to 0.3 to 0.7. That’s possible with an L
tweak value of 0.93, because 0.93 is higher than the neutral value for Oklab’s lightness (0.63) by 0.3.</p>

<p>Before, I gave an example that desaturates colors and increases contrast. How about some other options?</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// This lightens significantly and increases saturation slightly.</span>
<span class="c1">// Colors that get too light lose colorful-ness, so the saturation boost helps keep things vibrant.</span>
<span class="n">colorfulBatch</span><span class="o">.</span><span class="na">setTweak</span><span class="o">(</span><span class="mf">0.7f</span><span class="o">,</span> <span class="mf">0.6f</span><span class="o">,</span> <span class="mf">0.6f</span><span class="o">,</span> <span class="mf">0.5f</span><span class="o">);</span>

<span class="c1">// This darkens slightly, increases saturation sharply, and also lowers contrast significantly.</span>
<span class="c1">// This is somewhat of a dizzying-fog effect, and combined with changing batch colors, it can be a "bad trip" effect.</span>
<span class="n">colorfulBatch</span><span class="o">.</span><span class="na">setTweak</span><span class="o">(</span><span class="mf">0.4f</span><span class="o">,</span> <span class="mf">0.8f</span><span class="o">,</span> <span class="mf">0.8f</span><span class="o">,</span> <span class="mf">0.3f</span><span class="o">);</span>

<span class="c1">// This is a fire effect that changes over time.</span>
<span class="c1">// First we set the tweak to reduce lightness range slightly and reduce the range of A (green-to-red) heavily.</span>
<span class="n">colorfulBatch</span><span class="o">.</span><span class="na">setTweak</span><span class="o">(</span><span class="mf">0.45f</span><span class="o">,</span> <span class="mf">0.3f</span><span class="o">,</span> <span class="mf">0.5f</span><span class="o">,</span> <span class="mf">0.5f</span><span class="o">);</span>
<span class="c1">// Then, we set the color to raise lightness back up a little (with the reduced range, this removes the darkest levels).</span>
<span class="c1">// This also sharply pushes A over toward red, away from green or cyan. With its reduced range, cyan won't appear.</span>
<span class="c1">// B changes over time, but I didn't actually test this code, and it isn't optimal even if it works. Use your favorite</span>
<span class="c1">// 1D noise implementation here in place of the sin and cos and you'll get better results. B only changes between 0.5</span>
<span class="c1">// and 0.9 here, but that can change the "fire" from red to orange to yellow. Alpha is the normal 1f.</span>
<span class="n">colorfulBatch</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="mf">0.6f</span><span class="o">,</span> <span class="mf">0.8f</span><span class="o">,</span>
        <span class="nc">MathUtils</span><span class="o">.</span><span class="na">sin</span><span class="o">(</span><span class="nc">MathUtils</span><span class="o">.</span><span class="na">cos</span><span class="o">(</span><span class="nc">TimeUtils</span><span class="o">.</span><span class="na">millis</span><span class="o">()</span> <span class="o">*</span> <span class="mf">0.002f</span><span class="o">)</span> <span class="o">*</span> <span class="nc">MathUtils</span><span class="o">.</span><span class="na">PI</span><span class="o">)</span> <span class="o">*</span> <span class="mf">0.2f</span> <span class="o">+</span> <span class="mf">0.7f</span><span class="o">,</span> <span class="mi">1</span><span class="n">f</span><span class="o">);</span>
</code></pre></div></div>

<p>The last example changes the tweaks for A and B separately, which helps refine the changes it makes to the result.</p>

<h2 id="color-manipulation">Color Manipulation</h2>
<p>There’s a lot to say here, and I’ll have to skip a fair amount. Poke around ColorTools and you’ll find some interesting
methods, hopefully.</p>

<h3 id="float-color-dissection">Float Color Dissection</h3>
<p>The <code class="language-plaintext highlighter-rouge">ColorTools</code> class in each color space has a lot of methods for pulling apart float colors and getting specific
information. This can be simple, like <code class="language-plaintext highlighter-rouge">ColorTools.red()</code> in the RGB or Oklab color spaces (it gets the red channel value
or computes it for Oklab). This can also be less-simple, like <code class="language-plaintext highlighter-rouge">ColorTools.hue()</code>, which has to do a big conversion to
get the HSL-format hue (but you can see those hues in the RGB palettes linked above). Most of these methods are
straightforward to use. Some do require some explanation, like <code class="language-plaintext highlighter-rouge">ColorTools.chroma()</code> in Oklab, which gets how colorful
a color is <em>absolutely</em>, rather than how saturation is <em>relative</em> to the highest possible saturation at that hue and
lightness. Two colors with the same chroma should be pretty much equally far from gray.</p>

<h3 id="editing-colors">Editing Colors</h3>
<p>There are methods like <code class="language-plaintext highlighter-rouge">editRGB()</code> and <code class="language-plaintext highlighter-rouge">editOklab()</code> in the corresponding color space packages, which can be a good
choice if you want to make many changes at once. Otherwise, straightforward single-purpose methods like <code class="language-plaintext highlighter-rouge">lighten()</code>,
<code class="language-plaintext highlighter-rouge">darken()</code>, <code class="language-plaintext highlighter-rouge">enrich()</code> (which raises colorfulness), <code class="language-plaintext highlighter-rouge">dullen()</code> (which lowers colorfulness), and specific methods for
the color space may do what you want. There are also options to request colors by HSL values, with two variants of those
in Oklab plus another that uses “HCL” (using absolute chroma instead of relative saturation). Some editing methods
mention <code class="language-plaintext highlighter-rouge">limitToGamut()</code> in their JavaDocs; this takes any colors that may have been edited out of a valid range, and
brings them back into the valid range, typically keeping their lightness, but changing their saturation.</p>

<h3 id="color-mixing">Color Mixing</h3>
<p>The good stuff. <code class="language-plaintext highlighter-rouge">FloatColors</code> (not in a color space package) has the <code class="language-plaintext highlighter-rouge">lerpFloatColors()</code> and <code class="language-plaintext highlighter-rouge">mix()</code> methods, which
combine two or more colors. <code class="language-plaintext highlighter-rouge">lerpFloatColors()</code> allows you to specify how much the second color should affect the first,
such as 0.5 for an even mix, 0.25 to favor the first color, or 0.75 to favor the second color. While <code class="language-plaintext highlighter-rouge">mix()</code> doesn’t
have a way to set the degree of bias toward one color or another, it can mix more than two colors, all as an even mix.
Using <code class="language-plaintext highlighter-rouge">lerpFloatColors()</code> with changing values for its last parameter (<code class="language-plaintext highlighter-rouge">change</code>) leads to smooth blends, which can be
used for gradients or changes over time. That’s what Beatrix used for this slick effect:</p>

<p><img src="https://i.imgur.com/ojBUypw.gif" alt="Pretty Triangle!" /></p>

<h2 id="future-directions">Future Directions</h2>

<p>I’d like to have some more features for creating gradients. I’m also fairly sure something else will come up.</p>

<blockquote>
  <p>It was no longer shining out; it was pouring out; and as the shapeless stream of unplaceable colour left the well, it seemed to flow directly into the sky.
— <em>The Colour Out of Space</em>, H.P. Lovecraft</p>
</blockquote>

<p>colorful-gdx is an open source project and contributions and ideas are welcome! …Also, bug reports are welcome.</p>]]></content><author><name></name></author><category term="news" /><summary type="html"><![CDATA[Tommy Ettinger presents his colorful-gdx library in our Community Showcase!]]></summary></entry></feed>